service: () -> {
    addActivityType: (text, text, float64, nat64, nat64) -> (variant {Ok:record {id:principal; activityName:text; activityRate:nat64; activityDescription:text; activityEmissionsFactor:float64; activityEmmissionReduction:nat64}; Err:text});
    addBenchmarkData: (principal, text, nat64) -> (variant {Ok:record {id:principal; benchmarkName:text; emissionsThreshold:nat64}; Err:text});
    calculateEmissions: (principal, text) -> (variant {Ok:record {id:principal; activityName:text; emissions:nat64; date:nat64; activityDescription:text}; Err:text});
    compareEmissionsWithBenchmark: (principal) -> (variant {Ok:text; Err:text}) query;
    generateReport: (principal) -> (variant {Ok:text; Err:text}) query;
    generateUserSettings: (principal, text, bool) -> (variant {Ok:record {notificationsEnabled:bool; "principal":principal; preferredUnits:text}; Err:text});
    getHistoricalData: (principal, text) -> (variant {Ok:vec nat64; Err:text}) query;
    getUserEmissionsRecords: (principal) -> (variant {Ok:vec record {id:principal; activityName:text; emissions:nat64; date:nat64; activityDescription:text}; Err:text}) query;
    getUserSettings: (principal) -> (variant {Ok:record {notificationsEnabled:bool; "principal":principal; preferredUnits:text}; Err:text}) query;
    getUserTotalEmissions: (principal) -> (variant {Ok:nat64; Err:text}) query;
    registerUser: (text) -> (variant {Ok:record {id:principal; username:text; emissionsRecords:vec record {id:principal; activityName:text; emissions:nat64; date:nat64; activityDescription:text}}; Err:text});
}
